name: Continuous Integration (CI)

on:
    push:
        branches: 
            - "main"
        tags:
            - 'v*' # Triggers on tags starting with 'v', e.g., v1.0.0, v2.1
            - 'release-*' # Triggers on tags starting with 'release-', e.g., release-20250726
            - '**' # Triggers on any tag push
    pull_request:
        branches:
            - "main"
    workflow_dispatch:

jobs:
    build:
        name: Build and Test
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: pwsh
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                persist-credentials: false
                fetch-depth: 1 # Fetch only the latest commit
                fetch-tags: true # Explicitly fetch all tags

            - name: Set up Python 3.10
              uses: actions/setup-python@v5
              with:
                python-version: "3.10"
            
            - name: Install build tools
              run: >-
                python3 -m pip install build --user

            - name: Get tags
              run: git tag

            - name: Get tag at HEAD
              run: git tag --points-at HEAD

            - name: Run a multi-line script
              run: |
                echo Add other actions to build,
                echo test, and deploy your project.
                echo "The GitHub Run ID is: ${{ github.run_id }}"
                echo "The GitHub Run number is: ${{ github.run_number }}"
                echo "The GitHub Run attempt is: ${{ github.run_attempt }}"
                Write-Host "Write host run number: ${{ github.run_number}}"
                $FullTag = (git tag --points-at HEAD)
                Write-Host "Full tag found: $FullTag"
                $Version = $FullTag -replace '^release/', ''
                Write-Host "Extracted version: $Version"
                Add-Content -Path $env:GITHUB_ENV -Value "APP_VERSION=$Version"
                Write-Host "APP_VERSION environment variable set."

            - name: Use the extracted version in a different step (PowerShell)
              run: |
                Write-Host "Building application version: $($env:APP_VERSION)"
                Write-Host "Simulating a build process for version $($env:APP_VERSION)..."
                Get-ChildItem # Just to show another command running (PowerShell equivalent of ls -la)


            - name: Build a binary wheel and a source tarball
              env:
                RELEASE_VERSION: "${{ github.run_number }}"
              run: python3 -m build

            - name: Store the distribution packages
              uses: actions/upload-artifact@v4
              with:
                name: python-package-distributions
                path: dist/

            - name: Run a one-line script
              run: ls
            


    publish-to-pypi:
        name: Publish to PyPI
        runs-on: ubuntu-latest
        needs:
            - build
        steps:
            - name: Run a one-line script
              run: echo "This job is a placeholder for publishing to PyPI."

    publish-to-testpypi:
        name: Publish to TestPyPI
        runs-on: ubuntu-latest
        needs:
            - build
        steps:
            - name: Run a one-line script
              run: echo "This job is a placeholder for publishing to PyPI."