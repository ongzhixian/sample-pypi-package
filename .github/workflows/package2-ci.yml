# Giithub Actions Workflow
# Use to publish a Python package to PyPI or TestPyPI on package2 branch
# We want to use this workflow to test the publishing of a package named "readyperfectly-sample-package2"
name: Package2 (CI)
run-name: |
  ${{ 
    github.event_name == 'push' && format('{0} (Run ID: {1})', github.event.head_commit.message, github.run_id) || 
    github.event_name == 'pull_request' && format('PR-{0}: {1} ({2})', github.event.pull_request.number, github.event.pull_request.title, github.run_id) || 
    github.event_name == 'release' && format('Release: {0} ({1})', github.event.release.tag_name, github.run_id) ||
    github.event_name == 'workflow_dispatch' && format('Manual Run by @{0} ({1})', github.actor, github.run_id) ||
    format('Workflow Run ID: {0}', github.run_id)
  }}

on:
    push:
        # branches: 
        #     - "package2"
        tags:
            - 'v*' # Triggers on tags starting with 'v', e.g., v1.0.0, v2.1
            - 'release-*' # Triggers on tags starting with 'release-', e.g., release-20250726
            - '**' # Triggers on any tag push
    pull_request:
        branches:
            - "package2"
    workflow_dispatch:
        inputs:
            version_override:
                description: 'Version override'
                required: false
                type: string

jobs:
    build:
        name: Build Package
        runs-on: ubuntu-latest
        outputs:
            release_version: ${{ steps.set_release_version_var.outputs.release_version }} # Maps step output to job output
        defaults:
            run:
                shell: pwsh
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                persist-credentials: false

            - name: Set up Python 3.10
              uses: actions/setup-python@v5
              with:
                python-version: "3.10"
            
            - name: Install build tools
              run: >-
                python3 -m pip install build --user

            - name: Versioning
              env:
                GITHUB_EVENT_CONTEXT: ${{ toJson(github.event) }}
              run: |
                Write-Host "Workflow triggered  : ${{ github.event_name }}"
                Write-Host "Full event payload  : $env:GITHUB_EVENT_CONTEXT"
                
                Write-Host "Version override    : ${{ github.event.inputs.version_override }}"
                Write-Host "GitHub run id       : ${{ github.run_id }}"
                Write-Host "GitHub run attempt  : ${{ github.run_attempt }}"
                Write-Host "GitHub run number   : ${{ github.run_number }}"
                $versionConfig = (Get-Content .\version-config.json | ConvertFrom-Json)
                Write-Host "Version (Major)     : $versionConfig.major"
                Write-Host "Version (Minor)     : $versionConfig.minor"
                Write-Host "Version (Patch)     : $versionConfig.patch"
                $latestVersionNumber = "$($versionConfig.major).$($versionConfig.minor).$($versionConfig.patch + ${{ github.run_number }})"
                Write-Host "latestVersionNumber : $latestVersionNumber"
                Add-Content -Path $env:GITHUB_ENV -Value "APP_VERSION=$latestVersionNumber"
                Write-Host "APP_VERSION environment variable set."
                Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_VERSION=$latestVersionNumber"

            - name: Set release version variable
              id: set_release_version_var
              run: |
                Write-Host "::set-output name=release_version::$env:RELEASE_VERSION"

            - name: Use the extracted version in a different step (PowerShell)
              run: |
                Write-Host "Building application version: $($env:APP_VERSION)"
                Write-Host "Simulating a build process for version $($env:APP_VERSION)..."
                Get-ChildItem # Just to show another command running (PowerShell equivalent of ls -la)

            - name: Create and Push Tag
              run: |
                Write-Host "github.ref_name : ${{ github.ref_name }}"
                Write-Host "github.ref      : ${{ github.ref }}"
                Write-Host "github.ref_type : ${{ github.ref_type }}"
                Write-Host "github.head_ref : ${{ github.head_ref }}"
                Write-Host "github.base_ref : ${{ github.base_ref }}"
                git rev-parse --abbrev-ref HEAD
                $br1 = (git rev-parse --abbrev-ref HEAD)
                $br2 = (git branch --show-current)
                Write-Host "BR1         : $br1"
                Write-Host "BR2         : $br2"

            - name: Build a binary wheel and a source tarball
              # env:
              #   RELEASE_VERSION: "${{ github.run_number }}"
              run: python3 -m build

            - name: Store the distribution packages
              uses: actions/upload-artifact@v4
              with:
                name: python-package-distributions
                path: dist/

            - name: Run a one-line script
              run: ls -R

            - name: Job summary
              run: |
                $summary = @(
                  "## Release $env:RELEASE_VERSION"
                )
                # Write the combined content back to the file
                $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append



    publish-to-testpypi:
        #if: github.event_name == 'workflow_dispatch'
        name: Publish to TestPyPI
        runs-on: ubuntu-latest
        outputs:
            publish_to_testpypi: ${{ steps.set_completion_var.outputs.publish_to_testpypi }} # Maps step output to job output
        defaults:
            run:
                shell: pwsh
        needs:
            - build
        permissions:
            id-token: write
        steps:
            - name: Download package from build job
              uses: actions/download-artifact@v4
              with:
                name: python-package-distributions
                path: dist/
            - name: List downloaded files (for debugging)
              run: ls -R dist/
            - name: Publish package to TestPyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                repository-url: https://test.pypi.org/legacy/
                user: __token__
                password: ${{ secrets.TESTPYPI_API_TOKEN }}
                attestations: false
            - name: Send publish notification
              run: Write-Host "Package published to TestPyPI successfully!"
            - name: Set completion variable
              id: set_completion_var
              run: |
                Write-Host "::set-output name=publish_to_testpypi::$true"

            - name: Job summary
              run: |
                $summary = @(
                  "## Publish to TestPyPI"
                  "- **Status:** Success"
                )
                # Write the combined content back to the file
                $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append


    publish-to-pypi:
        if: github.event_name == 'workflow_dispatch'
        name: Publish to PyPI
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: pwsh
        needs:
            - build
        permissions:
            id-token: write
        environment:
            name: pypi
        steps:
            - name: Download package from build job
              uses: actions/download-artifact@v4
              with:
                name: python-package-distributions
                path: dist/
            - name: List downloaded files (for debugging)
              run: ls -R dist/
            - name: Publish package to PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                user: __token__
                password: ${{ secrets.PYPI_API_TOKEN }}
                attestations: false
            - name: Send publish notification
              run: Write-Host "Package published to PyPI successfully!"

    update_summary:
        # if: always()
        if: false
        name: Update Summary
        runs-on: ubuntu-latest
        needs: 
            - build
            - publish-to-testpypi
            - publish-to-pypi
        defaults:
            run:
                shell: pwsh
        permissions:
            id-token: write
        environment:
            name: pypi
        steps:
        - name: Prepend content to summary
          run: |
            # Retrieve outputs from job1 and job3.
            # These will be empty strings if the respective job was skipped.
            $publishToTestPypi = "${{ needs.publish-to-testpypi.outputs.publish_to_testpypi }}"
            $publishToPypi = "${{ needs.publishToTestPypi.outputs.job3_variable }}"
            $releaseVersion = "${{ needs.build.outputs.release_version }}"

            # Define the new content to prepend (placeholder for actual content)
            # $newContent = @(
            #   "## Test Results (Fake)"
            #   "- **Passed:** 10"
            #   "- **Failed:** 0"
            #   "- **Skipped:** 2"
            #   "### All tests passed successfully!"
            # )
            # $newContent += "- **TestPyPI:** Successfully published"
            $newContent = @() 

            $summary = [System.Collections.Generic.List[string]]@()
            $summary.Add("## Release $releaseVersion")
            if ($publishToTestPypi -eq 'true') {
                $summary.Add("Published to TestPyPI")
            }

            # Get the existing content of the summary file
            $existingContent = Get-Content -Path $env:GITHUB_STEP_SUMMARY

            # Combine the new and existing content
            $combinedContent = $summary + $newContent + $existingContent

            # Write the combined content back to the file
            $combinedContent | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
